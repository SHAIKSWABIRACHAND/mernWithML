{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\reshv\\\\Downloads\\\\ps final\\\\otp-login-app\\\\src\\\\components\\\\SignupPage.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport axios from 'axios'; //used to send server requests to the backend \nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SignupPage = () => {\n  _s();\n  const [email, setEmail] = useState(''); //the usestate is used to update what the user is giving in as an input so that the correct info can be sent to the backend \n  const [password, setPassword] = useState('');\n  const handleSignup = async e => {\n    // async lets the code run in backgound while the site is being loded  \n    e.preventDefault(); //prevents the default or blank/empty page from being submited \n    try {\n      const response = await axios.post('http://localhost:5000/signup', {\n        //await pauses the other things until a response is obtained from the server \n        email,\n        password //here email and password are passed to the backend \n      });\n      if (response.data.success) {\n        // if the response from the backend is recieved \n        alert('Signup successful. Please login.');\n        window.location.href = '/'; // Redirect to Login after successful signup\n      } else {\n        alert('Signup failed.'); // Incase of signup failure \n      }\n    } catch (error) {\n      console.error('Signup error', error); // if the handleSignup function is showing or giving us an error \n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Signup\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSignup,\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"email\",\n        value: email //whatever the user sends in as an input in the email block it is updated and stored \n        ,\n        onChange: e => setEmail(e.target.value) // e.target .value gives us the current input that is given by the user \n        ,\n        placeholder: \"Email\" //here e represents the event generated on updation of the field, so whenever the user gives in a new input a new event is generated\n        ,\n        required: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"password\",\n        value: password,\n        onChange: e => setPassword(e.target.value) // same goes for the password field too\n        ,\n        placeholder: \"Password\",\n        required: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: \"Sign Up\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Already have an account? \", /*#__PURE__*/_jsxDEV(\"a\", {\n        href: \"/\",\n        children: \"Login\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 35\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 28,\n    columnNumber: 5\n  }, this);\n};\n_s(SignupPage, \"TSZhDBNy8CmbxXgprY/vvMmTG1Q=\");\n_c = SignupPage;\nexport default SignupPage; //exporting the component \nvar _c;\n$RefreshReg$(_c, \"SignupPage\");","map":{"version":3,"names":["React","useState","axios","jsxDEV","_jsxDEV","SignupPage","_s","email","setEmail","password","setPassword","handleSignup","e","preventDefault","response","post","data","success","alert","window","location","href","error","console","children","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","type","value","onChange","target","placeholder","required","_c","$RefreshReg$"],"sources":["C:/Users/reshv/Downloads/ps final/otp-login-app/src/components/SignupPage.js"],"sourcesContent":["import React, { useState } from 'react'; \r\nimport axios from 'axios'; //used to send server requests to the backend \r\n\r\n\r\nconst SignupPage = () => {\r\n  const [email, setEmail] = useState('');  //the usestate is used to update what the user is giving in as an input so that the correct info can be sent to the backend \r\n  const [password, setPassword] = useState('');\r\n\r\n  const handleSignup = async (e) => { // async lets the code run in backgound while the site is being loded  \r\n    e.preventDefault(); //prevents the default or blank/empty page from being submited \r\n    try {\r\n      const response = await axios.post('http://localhost:5000/signup', { //await pauses the other things until a response is obtained from the server \r\n        email,\r\n        password,   //here email and password are passed to the backend \r\n      });\r\n      if (response.data.success) { // if the response from the backend is recieved \r\n        alert('Signup successful. Please login.');\r\n        window.location.href = '/';  // Redirect to Login after successful signup\r\n      } else {\r\n        alert('Signup failed.'); // Incase of signup failure \r\n      }\r\n    } catch (error) {\r\n      console.error('Signup error', error); // if the handleSignup function is showing or giving us an error \r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <h2>Signup</h2>\r\n      <form onSubmit={handleSignup}>\r\n        <input \r\n          type=\"email\"\r\n          value={email}   //whatever the user sends in as an input in the email block it is updated and stored \r\n          onChange={(e) => setEmail(e.target.value)} // e.target .value gives us the current input that is given by the user \r\n          placeholder=\"Email\"  //here e represents the event generated on updation of the field, so whenever the user gives in a new input a new event is generated\r\n          required\r\n        />\r\n        <input\r\n          type=\"password\"\r\n          value={password}\r\n          onChange={(e) => setPassword(e.target.value)}  // same goes for the password field too\r\n          placeholder=\"Password\"\r\n          required\r\n        />\r\n        <button type=\"submit\">Sign Up</button>\r\n      </form>\r\n      <p>Already have an account? <a href=\"/\">Login</a></p>  \r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SignupPage;  //exporting the component \r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}