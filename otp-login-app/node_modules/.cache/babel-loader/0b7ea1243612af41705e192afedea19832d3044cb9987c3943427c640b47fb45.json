{"ast":null,"code":"var _jsxFileName = \"D:\\\\Desktop\\\\ML (2)\\\\ML\\\\ps final\\\\otp-login-app\\\\src\\\\components\\\\OtpVerificationPage.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport axios from 'axios'; //importing modules \nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst OtpVerificationPage = () => {\n  _s();\n  const [otp, setOtp] = useState('');\n  const [verificationType] = useState('email'); // sets the verification type variable as email that we had recieved form the earlier login page \n\n  const handleOtpSubmit = async e => {\n    e.preventDefault();\n    const endpoint = verificationType === 'email' // checks whether the verificationtype is email or not \n    ? 'http://localhost:5000/verify-email-otp' //if true sets endpoint equal to the url \n    : 'http://localhost:5000/verify-phone-otp'; //if false\n\n    const email = localStorage.getItem('email'); //retrieves the email stored in our web application locally\n    const phoneNumber = localStorage.getItem('phoneNumber');\n    try {\n      const response = await axios.post(endpoint, {\n        email: verificationType === 'email' ? email : undefined,\n        //if true then the url in endpoint is executed to the backend \n        phoneNumber: verificationType === 'phone' ? phoneNumber : undefined,\n        otp\n      });\n      if (response.data.success) {\n        if (verificationType === 'email') {\n          // Redirect to PhonePage after successful email OTP verification\n          window.location.href = '/phone';\n        } else {\n          // Redirect to HomePage after successful phone OTP verification\n          window.location.href = '/home';\n        }\n      } else {\n        alert('Invalid OTP');\n      }\n    } catch (error) {\n      console.error('OTP verification error', error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Verify OTP\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleOtpSubmit,\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: otp,\n        onChange: e => setOtp(e.target.value) //updates to the current value entered by user \n        ,\n        placeholder: verificationType === 'email' ? 'Enter Email OTP' : 'Enter Phone OTP',\n        required: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: \"Verify OTP\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 43,\n    columnNumber: 5\n  }, this);\n};\n_s(OtpVerificationPage, \"qNBWIcsTqLvHiPutdjBQc2eWyUA=\");\n_c = OtpVerificationPage;\nexport default OtpVerificationPage;\nvar _c;\n$RefreshReg$(_c, \"OtpVerificationPage\");","map":{"version":3,"names":["React","useState","axios","jsxDEV","_jsxDEV","OtpVerificationPage","_s","otp","setOtp","verificationType","handleOtpSubmit","e","preventDefault","endpoint","email","localStorage","getItem","phoneNumber","response","post","undefined","data","success","window","location","href","alert","error","console","children","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","type","value","onChange","target","placeholder","required","_c","$RefreshReg$"],"sources":["D:/Desktop/ML (2)/ML/ps final/otp-login-app/src/components/OtpVerificationPage.js"],"sourcesContent":["import React, { useState } from 'react';   \r\nimport axios from 'axios';    //importing modules \r\n\r\nconst OtpVerificationPage = () => {\r\n  const [otp, setOtp] = useState('');\r\n  const [verificationType] = useState('email'); // sets the verification type variable as email that we had recieved form the earlier login page \r\n  \r\n  const handleOtpSubmit = async (e) => {\r\n    e.preventDefault();\r\n    \r\n    const endpoint = verificationType === 'email'  // checks whether the verificationtype is email or not \r\n      ? 'http://localhost:5000/verify-email-otp'   //if true sets endpoint equal to the url \r\n      : 'http://localhost:5000/verify-phone-otp';  //if false\r\n    \r\n    const email = localStorage.getItem('email') ;  //retrieves the email stored in our web application locally\r\n    const phoneNumber = localStorage.getItem('phoneNumber'); \r\n    \r\n    try {\r\n      const response = await axios.post(endpoint, {\r\n        email: verificationType === 'email' ? email : undefined, //if true then the url in endpoint is executed to the backend \r\n        phoneNumber: verificationType === 'phone' ? phoneNumber : undefined,\r\n        otp\r\n        \r\n      });\r\n      \r\n      if (response.data.success) {\r\n        if (verificationType === 'email') {\r\n          // Redirect to PhonePage after successful email OTP verification\r\n          window.location.href = '/phone';\r\n        } else {\r\n          // Redirect to HomePage after successful phone OTP verification\r\n          window.location.href = '/home';\r\n        }\r\n      } else {\r\n        alert('Invalid OTP');\r\n      }\r\n    } catch (error) {\r\n      console.error('OTP verification error', error);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <h2>Verify OTP</h2>\r\n      <form onSubmit={handleOtpSubmit}>\r\n        <input\r\n          type=\"text\"\r\n          value={otp}\r\n          onChange={(e) => setOtp(e.target.value)}  //updates to the current value entered by user \r\n          placeholder={verificationType === 'email' ? 'Enter Email OTP' : 'Enter Phone OTP'}\r\n          required\r\n        />\r\n        <button type=\"submit\">Verify OTP</button>\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default OtpVerificationPage;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,OAAOC,KAAK,MAAM,OAAO,CAAC,CAAI;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAE9B,MAAMC,mBAAmB,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAChC,MAAM,CAACC,GAAG,EAAEC,MAAM,CAAC,GAAGP,QAAQ,CAAC,EAAE,CAAC;EAClC,MAAM,CAACQ,gBAAgB,CAAC,GAAGR,QAAQ,CAAC,OAAO,CAAC,CAAC,CAAC;;EAE9C,MAAMS,eAAe,GAAG,MAAOC,CAAC,IAAK;IACnCA,CAAC,CAACC,cAAc,CAAC,CAAC;IAElB,MAAMC,QAAQ,GAAGJ,gBAAgB,KAAK,OAAO,CAAE;IAAA,EAC3C,wCAAwC,CAAG;IAAA,EAC3C,wCAAwC,CAAC,CAAE;;IAE/C,MAAMK,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC,CAAE,CAAE;IAC/C,MAAMC,WAAW,GAAGF,YAAY,CAACC,OAAO,CAAC,aAAa,CAAC;IAEvD,IAAI;MACF,MAAME,QAAQ,GAAG,MAAMhB,KAAK,CAACiB,IAAI,CAACN,QAAQ,EAAE;QAC1CC,KAAK,EAAEL,gBAAgB,KAAK,OAAO,GAAGK,KAAK,GAAGM,SAAS;QAAE;QACzDH,WAAW,EAAER,gBAAgB,KAAK,OAAO,GAAGQ,WAAW,GAAGG,SAAS;QACnEb;MAEF,CAAC,CAAC;MAEF,IAAIW,QAAQ,CAACG,IAAI,CAACC,OAAO,EAAE;QACzB,IAAIb,gBAAgB,KAAK,OAAO,EAAE;UAChC;UACAc,MAAM,CAACC,QAAQ,CAACC,IAAI,GAAG,QAAQ;QACjC,CAAC,MAAM;UACL;UACAF,MAAM,CAACC,QAAQ,CAACC,IAAI,GAAG,OAAO;QAChC;MACF,CAAC,MAAM;QACLC,KAAK,CAAC,aAAa,CAAC;MACtB;IACF,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,wBAAwB,EAAEA,KAAK,CAAC;IAChD;EACF,CAAC;EAED,oBACEvB,OAAA;IAAAyB,QAAA,gBACEzB,OAAA;MAAAyB,QAAA,EAAI;IAAU;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eACnB7B,OAAA;MAAM8B,QAAQ,EAAExB,eAAgB;MAAAmB,QAAA,gBAC9BzB,OAAA;QACE+B,IAAI,EAAC,MAAM;QACXC,KAAK,EAAE7B,GAAI;QACX8B,QAAQ,EAAG1B,CAAC,IAAKH,MAAM,CAACG,CAAC,CAAC2B,MAAM,CAACF,KAAK,CAAE,CAAE;QAAA;QAC1CG,WAAW,EAAE9B,gBAAgB,KAAK,OAAO,GAAG,iBAAiB,GAAG,iBAAkB;QAClF+B,QAAQ;MAAA;QAAAV,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACT,CAAC,eACF7B,OAAA;QAAQ+B,IAAI,EAAC,QAAQ;QAAAN,QAAA,EAAC;MAAU;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACrC,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACJ,CAAC;AAEV,CAAC;AAAC3B,EAAA,CArDID,mBAAmB;AAAAoC,EAAA,GAAnBpC,mBAAmB;AAuDzB,eAAeA,mBAAmB;AAAC,IAAAoC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}